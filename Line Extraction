
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

public class LineExtraction extends JFrame {
	private static final long serialVersionUID = 3333045521442530281L;
	private JFrame frame;
	private JLabel source,target,statusBar;
	private JPanel panel;
	private JTextField sourceFile,targetFolder;
	private JButton selectSource, selectTarget,begin;
	private String filename = "x";
	private File fileOpen,fileSave,fileSavedir;
	JMenuBar menuBar;
	JMenu fileMenu,helpMenu;
	JMenuItem exit,howtoUse,about;
	
	public LineExtraction(){
		frame = new JFrame("Line Extraction!");
		panel = new JPanel();
		source = new JLabel("Source file:   ");
		target = new JLabel("Target folder:");
		statusBar = new JLabel("Ready");
		statusBar.setFont(new Font(Font.DIALOG_INPUT,Font.BOLD,15));
		statusBar.setBorder(BorderFactory.createRaisedBevelBorder());
		sourceFile = new JTextField(20);
		targetFolder = new JTextField(20);
		selectSource = new JButton("Select ... ");
		selectSource.addActionListener(new SourceListener());
		selectTarget = new JButton("Select ... ");
		selectTarget.addActionListener(new TargetListener());
		begin = new JButton("Begin Extraction");
		begin.addActionListener(new BeginListener());
		
		panel.setLayout(new FlowLayout());
		panel.add(source);
		panel.add(sourceFile);
		panel.add(selectSource);
		panel.add(target);
		panel.add(targetFolder);
		panel.add(selectTarget);
		panel.add(begin);
		
		frame.add(panel,BorderLayout.CENTER);
		frame.add(statusBar,BorderLayout.SOUTH);
		
		menuBar = new JMenuBar();
		fileMenu = new JMenu("File");
		helpMenu = new JMenu("Help");
		exit = new JMenuItem("Exit");
		exit.setActionCommand("Exit");
		exit.addActionListener(new MenuItemListener());
		howtoUse = new JMenuItem("How to use?");
		howtoUse.setActionCommand("howtoUse");
		howtoUse.addActionListener(new MenuItemListener());
		about = new JMenuItem("About");
		about.setActionCommand("About");
		about.addActionListener(new MenuItemListener());
		
		fileMenu.add(exit);
		helpMenu.add(howtoUse);
		helpMenu.add(about);
		menuBar.add(fileMenu);
		menuBar.add(helpMenu);
		frame.setJMenuBar(menuBar);
		//frame.setLayout(new FlowLayout());
		frame.setSize(450,200);
		frame.setVisible(true);
		frame.setResizable(false);
		frame.setLocation(300, 300);
	}
	class SourceListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent e){
			JFileChooser fileDialog = new JFileChooser();
			fileDialog.showOpenDialog(frame);
			fileOpen = fileDialog.getSelectedFile();
			filename = fileOpen.getName();
			sourceFile.setText(fileOpen+"");
		}
	}
	class TargetListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent e){
			//String dir;
			JFileChooser fileSaveDialog = new JFileChooser();
			if(fileSaveDialog.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION ){
				fileSave = fileSaveDialog.getCurrentDirectory();
				try {
					fileSave.createNewFile();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				fileSaveDialog.setSelectedFile(fileSave);
				targetFolder.setText(fileSave+"");
			}
		}
	}
	class BeginListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent e){
			int counter=1;
			if(sourceFile.getText().equals("")){
				statusBar.setText("You haven't selected a source file!");
				sourceFile.requestFocus();
			}
			else if(targetFolder.getText().equals("")){
				statusBar.setText("You haven't selected a target folder!");
				targetFolder.requestFocus();
			}
			else{
				statusBar.setText("Processing file: "+filename);
				String line="";
				String outFilename = counter+".txt";
				try {
					BufferedReader fileReader = new BufferedReader(new FileReader(filename));
					try {
						while( (line = fileReader.readLine()) != null){
							fileSavedir=new File(fileSave,outFilename);
							BufferedWriter fileWriter = new BufferedWriter(new FileWriter (fileSavedir));
							fileWriter.write(line);
							counter++;
							outFilename = counter+".txt";
							fileWriter.close();
						}
						fileReader.close();
						statusBar.setText("Created "+ (counter-1) +" files in "+fileSavedir);
					} catch (IOException e1) {
						statusBar.setText("Unable to open input file or output folder");
						e1.printStackTrace();
					}
				} catch (FileNotFoundException e1) {
					statusBar.setText("File not found: "+filename);
					e1.printStackTrace();
				}
			}
		}
	}
	
	class MenuItemListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent e){
			if(e.getActionCommand().equals("Exit")){
				System.exit(0);
			}
			else if(e.getActionCommand().equals("howtoUse")){
				JOptionPane.showMessageDialog(frame,"This program reads a text file and copies\n"
						+ "all the lines of the file to a new file\n"
						+ "with each file containing only one line\n"
						+ " from the original file.\n\n"
						+ "The output files are labelled\n"
						+ " 1.txt, 2.txt and son on, \n"
						+ "the highest number being the number of lines\n"
						+ " in the source file. Select the folder \n"
						+ "where the extracted lines are to be saved\n"
						+ " in the target folder textbox. Please note that\n"
						+ "although you have to type a filename to \n"
						+ "select the target folder, the filename\n"
						+ "supplied by the user is not used. Only the\n"
						+ "default file names 1, 2, 3, etc are used.\n"
						+ "And remember also that the source file\n"
						+ "must be .txt file!\n\n",
						"How to use this program?",
						JOptionPane.INFORMATION_MESSAGE);
			}
			else{
				JOptionPane.showMessageDialog(frame, "Designed by: \n Er. Kumar Dhakal\ndhakalkumar10@gmail.com","About Line Extraction!",
						JOptionPane.INFORMATION_MESSAGE);
			}
		}
	}
	public static void main(String[] args){
		SwingUtilities.invokeLater(new Runnable(){
			public void run(){
				new LineExtraction();
			}
		});
	}
}
